pipeline {
    agent any
    tools {
        nodejs 'Node Js'
    }
   environment {
        AWS_CREDENTIALS = credentials('aws-key')
        AWS_DEFAULT_REGION = 'us-east-1'  // Replace with your region
        PATH = "C:\\Program Files\\Amazon\\AWSCLIV2\\;${env.PATH}"
    }
    stages {
        stage('Git Checkout') {
            steps {
                git url: "https://github.com/javahometech/reactjs-app/", branch: "main"
            }
        }
        stage('NPM Install') {
            steps {
                sh "npm install"
            }
        }
        stage('Node Build') {
            steps {
                sh "npm run build"
            }
        }
        stage('S3 Deploy') {
           steps {
                withEnv(["AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}", 
                        "AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}"]) {
                    sh "aws s3 sync dist/ s3://vishnu-react-cicd-demo --delete"
                }
            }
        }
    }
}


pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/VishnuOjha/react-cicd-pipeline.git']])
            }
        }
    }
}


----------------------------GIthub webhook-------------------------------------
pipeline {
    agent any
    tools {
        nodejs 'Node Js'  // Ensure Node.js is installed on your Jenkins node
    }
    environment {
        // You can keep environment variables here if needed, but no AWS config required now
        PATH = "C:\\Program Files\\Amazon\\AWSCLIV2\\;${env.PATH}"  // Optional: If you need AWS CLI for other tasks
    }
    triggers {
        // GitHub webhook trigger
        githubPush()  // This will listen for the GitHub webhook push event
    }
    stages {
        stage('Git Checkout') {
            steps {
                // Checkout the code from GitHub repository
                git url: "https://github.com/VishnuOjha/react-cicd-pipeline.git", branch: "master"
            }
        }
        stage('NPM Install') {
            steps {
                // Install dependencies using npm
                sh "npm install"
            }
        }
        stage('Node Build') {
            steps {
                // Run the build command
                sh "npm run build"
            }
        }
        // Remove the S3 Deploy stage since we are not using AWS now
    }
}


-------------------------------------------------------------------------------------------------------------


pipeline {
    agent any
    
    environment {
        // You can set environment variables here if needed
        NODE_HOME = tool name: 'NodeJS', type: 'NodeJSInstallation'
        DOCKER_HOME = '/usr/local/bin/docker'  // Set the path to docker if it's not default
    }
    
    stages {
        
        stage('Declarative: Tool Install') {
            steps {
                script {
                    try {
                        // Install necessary tools or dependencies if required
                        echo "Installing necessary tools..."
                    } catch (Exception e) {
                        echo "Warning: Tool installation failed, continuing..."
                    }
                }
            }
        }
        
        stage('Git Checkout') {
            steps {
                script {
                    try {
                        echo "Checking out the latest code..."
                        checkout scm
                    } catch (Exception e) {
                        error("Git Checkout failed: ${e.message}")
                    }
                }
            }
        }

        stage('NPM Install') {
            steps {
                script {
                    try {
                        echo "Running npm install..."
                        sh 'npm install || true'  // Continue even if npm install has warnings or issues
                    } catch (Exception e) {
                        echo "Warning: npm install failed but continuing build process..."
                    }
                }
            }
        }

        stage('Node Build') {
            steps {
                script {
                    try {
                        echo "Building the project with Vite..."
                        sh 'npm run build || true'  // Avoid failure here, log the issue instead
                    } catch (Exception e) {
                        echo "Warning: Build failed, continuing..."
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        echo "Building Docker image..."
                        sh 'docker build -t react-cicd-demo:latest . || true' // Avoid failure
                    } catch (Exception e) {
                        echo "Warning: Docker build failed but continuing build process..."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    try {
                        echo "Pushing Docker image..."
                        sh 'docker push react-cicd-demo:latest || true'  // Avoid failure
                    } catch (Exception e) {
                        echo "Warning: Docker push failed but continuing build process..."
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                script {
                    try {
                        echo "Deploying to staging..."
                        sh 'deploy_to_staging.sh || true'  // Replace with actual deployment command
                    } catch (Exception e) {
                        echo "Warning: Deployment to staging failed. Please check manually."
                    }
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    try {
                        echo "Performing clean up operations..."
                        sh 'cleanup.sh || true'  // Clean-up scripts or commands
                    } catch (Exception e) {
                        echo "Warning: Clean-up failed but continuing build process..."
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Build process finished. Cleanup if needed."
            // Any post-build actions like archiving results, sending notifications
        }
        
        success {
            echo "Build was successful!"
        }
        
        failure {
            echo "Build failed, please check the logs!"
            // Optionally send an email notification or alert
        }
    }
}
